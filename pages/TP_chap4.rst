üèãÔ∏è Travaux Pratiques 4
=========================

.. slide::
Exercice 0 : Mise en place
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Cr√©er un notebook Jupyter et importer les biblioth√®ques n√©cessaires. Assurez-vous que celles-ci soient disponibles dans votre noyau jupyter.

- numpy
- matplotlib
- skimage
- torch

.. slide::
Exercice 1 : Fichier Image
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1) T√©l√©chargez l'image suivante.

2) Charger l'image avec la biblioth√®que matplotlib.

3) Afficher l'image charg√©e.

4) Expliquer le format num√©rique de l'image charg√©e (i.e., regardez le type et la forme de votre variable image).

.. figure:: images/tp4/elephants.png
   :align: center
   :width: 250px
   :alt: elephants.png

.. slide::
Exercice 2 : Traitement d'une image
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1) **[En une seule ligne]** Att√©nuer les couleurs (r√©duire alpha)

.. figure:: images/tp4/low_alpha.png
   :align: center
   :width: 250px


2) **[En une seule ligne]** Donner un alpha diff√©rent (al√©atoire) √† chaque pixel, afficher pour v√©rifier puis remettre √† 1

.. figure:: images/tp4/rand_alpha.png
   :align: center
   :width: 250px

3) **[En une seule ligne]** R√©cup√©rer et afficher uniquement l'√©l√©phanteau (attention au syst√®me de coordonn√©es !)

.. figure:: images/tp4/baby.png
   :align: center
   :width: 250px

4) Faites en sorte que l'image soit affich√©e correctement avec l'origine (0,0) en bas √† gauche

.. figure:: images/tp4/origin00.png
   :align: center
   :width: 250px


5) D√©coupez l'image en morceaux (aka, patches) de taille 240x240 pixels, affichez-les dans une seule figure

.. figure:: images/tp4/patches.png
   :align: center
   :width: 250px


6) Redimmensionnez chaque patch en 64x64 pixels

7) Reconstituez et affichez l'image a partir des patches redimensionn√©s

.. figure:: images/tp4/patches_reconstituted.png
   :align: center
   :width: 250px


8) Afficher l'histogramme des couleurs de l'image

.. figure:: images/tp4/color_hist.png
   :align: center
   :width: 400px

9) Changer la couleur du ciel bleu en bleu sombre (nuit). Cela √©quivaut √©galement √† annoter automatiquement les pixels du ciels pour cette image.

.. figure:: images/tp4/blue_sky.png
   :align: center
   :width: 400px

10) R√©duisez la r√©solution de l'image d'un facteur 20.

.. figure:: images/tp4/rescale.png
   :align: center
   :width: 250px


11) Appliquer un filtre de convolution gaussien pour lisser l'image en basse r√©solution

.. figure:: images/tp4/conv.png
   :align: center
   :width: 500px


.. slide::
Exercice 3 : Traitement d'un batch d'images
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1) R√©cup√©rez sur internet une image de Chien, Chat et Cheval, puis redimensionnez les toutes aux m√™mes dimensions. 

2) Appliquez ensuite les m√™mes traitements (exercice 2.) sur le batch d'images [Elephants, Chien, Chat, Cheval] en utilisant la biblioth√®que PyTorch. Adaptez les questions si n√©cessaire (par exemple lorsqu'il n'y a pas d'√©l√©phanteau dans les images). ‚ö†Ô∏è Votre code doit traiter toutes les images simultan√©ment.

3) Cr√©ez une nouvelle classe *MyDataset* qui h√©rite de *torch.utils.data.Dataset*. Faites en sorte que cette classe charge et pr√© automatiquement vos images et les pr√©-traite de la mani√®re suivante : 

- Redimensionnement √† 64x64 pixels
- Lissage avec un filtre gaussien (convolution)
- Normalisation des valeurs de chaque canal entre -0.5 et 0.5
- Association d'un label (a.k.a., √©tiquette, v√©rit√© terrain) √† chaque image

.. raw:: html

   ‚ö†Ô∏è Votre classe doit bien <b>h√©riter</b> de <i>torch.utils.data.Dataset</i>, et il est imp√©ratif d'impl√©menter les m√©thodes <code>__len__()</code> et <code>__getitem__()</code>.


.. slide::
Exercice 4 : Classification d'image avec des couches de convolution
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1) Reprenez le jeu de donn√©es Digits_ de sklearn vu dans les exercices du TP3, et rechargez-le comme vous avez appris √† le faire (jeux de *train* et *val*).

.. _Digits: https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_digits.html


2) Cr√©ez un r√©seau de neurones convolutif (CNN) avec maximum 3 couches pour classer ces images. Vous pouvez vous inspirer de l'architecture suivante :

üí°Regardez la documentation de _torch.nn.Conv2d_ pour plus de d√©tails sur les couches de convolution.

3) Comparez les performances de ce CNN avec celles du MLP que vous aviez cr√©√© dans le TP3.