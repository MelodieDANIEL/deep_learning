üèãÔ∏è Travaux Pratiques 3
=========================

.. slide::
Exercice 0 : Mise en place
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Cr√©er un notebook Jupyter et importer les biblioth√®ques n√©cessaires. Assurez-vous que celles-ci soient disponibles dans votre noyau jupyter.

- numpy
- matplotlib
- sklearn
- pandas
- torch
- wandb (n√©cessite de se cr√©er un compte sur wandb_)

.. _wandb: https://wandb.ai/

Les exercices suivants sont √† r√©aliser dans un (ou plusieurs) notebook(s) Jupyter.

.. slide::
Exercice 1 : Classification multi-classes - Iris
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1) Charger le jeu de donn√©es Iris depuis sklearn et affichez le sous la forme d'un DataFrame *pandas*.

Ce jeu de donn√©es contient des donn√©es de fleurs, et l'objectif est de pr√©dire l'esp√®ce de la fleur √† partir d'observations sur ses caract√©ristiques (features).

.. code-block:: python
    import sklearn
    import pandas as pd
    iris = sklearn.datasets.load_iris()
    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
    df['target'] = [iris.target_names[i] for i in iris.target]
    print(df.head())

2) R√©pondez aux questions suivantes :
  
  - Combien y a-t-il de donn√©es ?
  - Combien y a-t-il de features (caract√©ristiques) ?
  - Combien y a-t-il de classes, et quelles sont-elles ?
  - Combien y a-t-il de donn√©es par classe ? Est-ce √©quilibr√© ?
  - Quelle doit √™tre la taille de l'entr√©e et de la sortie d'un r√©seau de neurones qui devrait classer ces donn√©es ?
  - Quelle fonction de co√ªt devez-vous utiliser pour entra√Æner ce r√©seau de neurones ?

3) Cr√©ez un MLP √† 3 couches (entr√©e, cach√©e, sortie) pour classer ces donn√©es.

4) Cr√©ez un jeu de donn√©es PyTorch √† partir des donn√©es Iris et entra√Ænez le MLP par batch de 8 en affichant la *Loss* √† chaque fin d'√©poque.

Utilisez le code suivant pour cr√©er un DataLoader PyTorch. A vous de trouver comment cr√©er les tenseurs *train_X* et *train_y* (lisez la documentation de *sklearn.datasets.load_iris()*). 

.. code-block:: python
    
    import torch
    train_loader = torch.utils.data.DataLoader(
      torch.utils.data.TensorDataset(train_X, train_y), batch_size=batch_size, shuffle=True
    ) 


5) √âvaluez la performance du mod√®le sur l'ensemble d'entra√Ænement en calculant les m√©triques suivantes : 

- l'exactitude (accuracy).

**Impl√©mentez-la vous m√™me**, puis comparez votre r√©sultat avec la fonction de sklearn.

6) Affichez la matrice de confusion. Quelles sont les erreurs commises par votre mod√®le ?

Aidez-vous de *sklearn.metrics.confusion_matrix* et *matplotlib.pyplot.imshow* (ou *matshow*).

.. slide::
Exercice 2 : Classification multi-classes - Breast Cancer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1) Charger le jeu de donn√©es BreastCancer_ depuis sklearn et affichez le sous la forme d'un DataFrame *pandas*.

.. _BreastCancer : https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_breast_cancer.html

Ce jeu de donn√©es contient les informations de patients, et l'objectif est de savoir si celui-ci est malade ou non.

2) R√©pondez aux questions suivantes :
  
  - Combien y a-t-il de donn√©es ?
  - Combien y a-t-il de features (caract√©ristiques) ?
  - Combien y a-t-il de classes, et quelles sont-elles ?
  - Combien y a-t-il de donn√©es par classe ? Est-ce √©quilibr√© ?
  - Quelle doit √™tre la taille de l'entr√©e et de la sortie d'un r√©seau de neurones qui devrait classer ces donn√©es ?
  - Quelle fonction de co√ªt devez-vous utiliser pour entra√Æner ce r√©seau de neurones ?

3) Cr√©ez **deux** jeux de donn√©es distincts : un pour l'entra√Ænement et un pour la validation du mod√®le. Utilisez 70% des donn√©es pour l'entra√Ænement et 30% pour la validation.

4) Cr√©ez un MLP √† 3 couches (entr√©e, cach√©e, sortie) pour classer ces donn√©es et entra√Ænez le par batch de 8. 
A chaque √©poque de l'entra√Ænement : 

- √âvaluez le mod√®le sur le jeu de validation
- Affichez la *Train loss*, *Validation loss* et *Validation accuracy*
- Sauvegardez le mod√®le s'il est meilleur que les pr√©c√©dents (quel crit√®re utilisez-vous ?)

‚ö†Ô∏è Il est pr√©f√©rable de ne pas calculer les performances (autres que la loss) sur les donn√©es du jeu d'entra√Ænement. Cela peut avoir un co√ªt calculatoire important et n'est pas tr√®s utile.

‚ùìEst-ce une bonne id√©e de calculer la *Validation accuracy* ? Pourquoi ?

5) Rechargez la meilleure version du mod√®le et calculez les m√©triques suivantes sur le jeu de validation: 

- L'exactitude (accuracy)
- La pr√©cision (precision)
- Le rappel (recall)
- Le score F1 (F1-score)

**Impl√©mentez-les vous m√™me**, puis comparez vos r√©sultats avec les fonctions de sklearn.

6) Affichez la matrice de confusion. Si votre mod√®le avait √©t√© un m√©decin : 

- Combien de personnes saines auraient √©t√© trait√©es inutilement ? (Rappel : le traitement d'un cancer peut comporter de lourds effets secondaires)
- Combien de personnes malades n'auraient pas √©t√© trait√©es ? (Rappel : un cancer peut √™tre mortel)

7) Modifiez la fonction de co√ªt pour p√©naliser plus fortement les erreurs sur la classe "malade". Entra√Ænez √† nouveau le mod√®le.

.. slide::
Exercice 3 : Classification multi-classes - Handwritten Digits
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

0) Installez et importez la biblioth√®que *wandb*, cr√©ez un compte sur https://wandb.ai/.

1) Charger le jeu de donn√©es Digits_ depuis sklearn et affichez le sous la forme d'un DataFrame *pandas*.

.. _Digits: https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_digits.html

Ce jeu de donn√©es contient des images de chiffres manuscrits, et l'objectif est de pr√©dire quel chiffre est repr√©sent√© dans chaque image.

2) R√©pondez aux questions suivantes :

  - Combien y a-t-il de donn√©es ?
  - Combien y a-t-il de features (caract√©ristiques) ?
  - Combien y a-t-il de classes, et quelles sont-elles ?
  - Combien y a-t-il de donn√©es par classe ? Est-ce √©quilibr√© ?
  - Quelle doit √™tre la taille de l'entr√©e et de la sortie d'un r√©seau de neurones qui devrait classer ces donn√©es ?
  - Quelle fonction de co√ªt devez-vous utiliser pour entra√Æner ce r√©seau de neurones ?

3) Cr√©ez deux jeux de donn√©es distincts : un pour l'entra√Ænement et un pour la validation du mod√®le. Utilisez 70% des donn√©es pour l'entra√Ænement et 30% pour la validation.

4) Cr√©ez un MLP √† 5 couches pour classer ces donn√©es. Faites en sorte que le r√©seau ait 2 sorties : une pour les logits, et une pour les caract√©ristiques en sortie de l'avant derni√®re couche (features embedding). 

5) Entra√Ænez le r√©seau en utilisant la biblioth√®que *wandb* pour le suivi des exp√©riences.

‚ö†Ô∏è Ce r√©seau a 2 sorties, on utilise uniquement les logits pour calculer la fonction de co√ªt.

A chaque √©poque de l'entra√Ænement :

- √âvaluez le mod√®le sur le jeu de validation
- Affichez la *Train loss*, *Validation loss* et *Validation accuracy*
- Sauvegardez le mod√®le s'il est meilleur que les pr√©c√©dents (quel crit√®re utilisez-vous ?)

6) Affichez la matrice de confusion. Quels sont les chiffres les plus souvent confondus ?

7) Utilisez *sklearn.manifold.TSNE* pour r√©duire les dimensions des features embeddings √† 2D. Affichez les points dans un nuage de points 2D en coloriant chaque point selon sa classe.

Analysez le r√©sultat. Cela est-il coh√©rent avec ce que vous observez dans la matrice de confusion ?

8) Faites varier les hyperparam√®tres suivants et analysez leur impact sur les performances du mod√®le :

- Le taux d'apprentissage 
- La taille des batchs 
- Le nombre de couches cach√©es 
- Le nombre de neurones par couche
- Le nombre d'√©poques

Param√©tez *wandb* pour suivre ces hyperparam√®tres, et modifier l'interface web pour afficher leur importance sur les performances du mod√®le.